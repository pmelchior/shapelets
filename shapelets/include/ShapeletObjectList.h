#ifndef SHAPELETOBJECTLIST_H
#define SHAPELETOBJECTLIST_H

#include <ShapeletObject.h>
#include <vector>
#include <string>
#include <boost/shared_ptr.hpp>

/// Class for managing an ensemble of ShapeletObjects.
/// This class is meant for loading a set of ShapeletObject entities by giving a list
/// of SIFFile names as an ASCII file.\n
/// It is derived from <tt>std::vector<boost::shared_ptr<ShapeletObject> ></tt>, 
/// so effectively one has a vector of pointers to ShapeletObjects with the additional layer of the
/// <tt>boost::shared_ptr</tt> which ensures that created object are deleted when the last 
/// <tt>shared_ptr</tt> pointing to it is destroyed or reset.\n\n
/// For more details on <tt>std::vector</tt> and <tt>boost::shared_ptr</tt>, see
/// http://www.cppreference.com/cpplist/index.html and http://www.boost.org/libs/smart_ptr/shared_ptr.htm.\n\n
///
/// The elements of the vector can by accessed via an index or an iterator:
/// \code
/// // file.lst is generated by something like
/// // ls *.sif > file.lst
/// ShapeletObjectList sl("file.lst");
/// ShapletObjectList::iterator iter;
/// for (iter = sl.begin(); iter != sl.end(); iter++) {
///   ShapeletObject* sobj = (*iter);
///   ...
/// }
/// \endcode
///
/// Apart from that, one can select an arbitrary criterium for any ShapeletObject 
/// to select a subset of these objects by giving an appropriate
/// <tt>selectionFunction</tt>:
/// \code
/// bool selectionFunction(ShapeletObject& sobj) {
///   if (sobj.getDecompositionChiSquare() < 1) 
///     return 1;
///   else
///     return 0;
/// }
/// ShapeletObjectList sl("file.lst",&selectionFunction);
/// \endcode
/// In this example, all SIFFile names stored in <tt>file.lst</tt> are opened;
/// if their decomposition \f$\chi^2\f$ is less than 1, they will be included in
/// the list.


class ShapeletObjectList : public std::vector<boost::shared_ptr<ShapeletObject> > {
 public:
  /// Constructor for loading all files in <tt>listfile</tt>.
  ShapeletObjectList(std::string listfile);
  /// Constructor for loading a subset of files from <tt>listfile</tt>. 
  /// The ShapeletObject <tt>sobj</tt> entities have to fulfill the criterium 
  /// <tt>selectionFunction (sobj) == 1</tt> to be included in the list.
  ShapeletObjectList(std::string listfile, bool (* selectionFunction) (ShapeletObject&));
 private:
  void readListFile(std::string listfile, bool (* selectionFunction) (ShapeletObject&));
};
#endif
